plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
//    id 'com.google.devtools.ksp'
    id "com.google.protobuf" version "0.8.12"
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()

    def baseVerName = "1.0.0"
    def autoBuildNumber = System.properties['auto_build_num']

    def verName = getVerName(baseVerName, autoBuildNumber)
    def verCode = getVerCode(baseVerName, autoBuildNumber)
    println("VersionName = $verName, VersionCode = $verCode")

    defaultConfig {
        applicationId "com.tustar.demo"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode verCode
        versionName verName
        multiDexEnabled true

        testInstrumentationRunner "androidx.selector_sunset2.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    ndkVersion libs.versions.ndk.get()

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version libs.versions.protobuf
        }
    }
    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true

        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.aar"])
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Kotlin
    implementation libs.kotlin.stdlib.jdk8
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    // androidx
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.constraintlayout.base
    implementation libs.androidx.recyclerview
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.vectordrawable
    implementation libs.androidx.datastore.preferences
    implementation libs.androidx.datastore.core
    implementation libs.activity.ktx
    implementation libs.fragment.ktx
    // Lifecycle
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.lifecycle.extensions
    // Navigation
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    implementation libs.navigation.dynamic.features.fragment

    // StartUp
    implementation libs.startup.runtime
    // WorkManager
    implementation libs.work.runtime.ktx
    implementation libs.work.gcm
    implementation libs.work.multiprocess
    // Compose
    implementation libs.bundles.compose
    implementation libs.activity.compose
    implementation libs.navigation.compose
    implementation libs.constraintlayout.compose
    // Hilt
    implementation libs.dagger.hilt.android
    implementation libs.hilt.work
    implementation libs.hilt.navigation.composese
    kapt libs.dagger.hilt.compiler
    kapt libs.hilt.compiler
    // Amap
    implementation libs.amap.location
    // Google
    implementation libs.google.material.base
    implementation libs.protobuf.javalite
    // Accompanist
    implementation libs.bundles.accompanist
    // Gson
    implementation libs.google.gson
    // Test
    implementation libs.compose.ui.test.junit4
    testImplementation libs.junit
    androidTestImplementation libs.work.testing
    androidTestImplementation libs.navigation.testing
    androidTestImplementation libs.test.core
    androidTestImplementation libs.test.core.ktx
    androidTestImplementation libs.test.ext.junit.ktx
    androidTestImplementation libs.test.espresso.core
    //
    implementation project(':annotation')
    implementation project(':weather')
    implementation project(':data')
    implementation project(':ktx')
    //
    kapt project(':compiler')
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

static def getVerName(String baseVerName, String autoBuildNumber) {
    return autoBuildNumber ? String.format("%s.%04d", baseVerName, autoBuildNumber.toInteger()) : baseVerName
}

static def getVerCode(String baseVerName, String autoBuildNumber) {
    return getVerName(baseVerName, autoBuildNumber).replace(".", "").toInteger()
}