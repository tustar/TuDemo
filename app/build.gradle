plugins {
    id 'tustar.android.application'
    id 'tustar.android.application.compose'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp'
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    ndkVersion libs.versions.ndk.get()

    def baseVerName = "1.0.0"
    def autoBuildNumber = System.properties['auto_build_num']

    def verName = getVerName(baseVerName, autoBuildNumber)
    def verCode = getVerCode(baseVerName, autoBuildNumber)
    println("VersionName = $verName, VersionCode = $verCode")

    defaultConfig {
        applicationId "com.tustar.demo"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode verCode
        versionName verName
        multiDexEnabled true

        testInstrumentationRunner "androidx.selector_sunset2.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.androidxComposeCompiler.get()
    }
}

dependencies {
    // Libs
    implementation fileTree(dir: "libs", include: ["*.aar"])
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Androidx
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.metrics
    implementation libs.androidx.core.splashscreen
    implementation libs.androidx.window
    // Lifecycle
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    // Google
    implementation libs.google.material
    // Hilt
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    kapt libs.hilt.ext.compiler
    // Accompanist
    implementation libs.bundles.accompanist
    // Compose
    implementation(libs.androidx.compose.material.iconsExtended)
    implementation libs.bundles.compose
    //
    implementation libs.coil.kt
    implementation libs.coil.kt.svg
    // Test
    androidTestImplementation libs.bundles.test
    // feature
    implementation project(':feature:sample')
    implementation project(':feature:weather')
    implementation project(':feature:dynamic')
    //
    implementation project(':core:ui')
    implementation project(':core:common')
    // annotations
    implementation project(':annotations:annotation')
//    kapt project(':annotations:compiler')
//    ksp project(':annotations:ksp')
}

static def getVerName(String baseVerName, String autoBuildNumber) {
    return autoBuildNumber ? String.format("%s.%04d", baseVerName, autoBuildNumber.toInteger()) : baseVerName
}

static def getVerCode(String baseVerName, String autoBuildNumber) {
    return getVerName(baseVerName, autoBuildNumber).replace(".", "").toInteger()
}