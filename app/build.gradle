import com.tustar.demo.buildsrc.Libs

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
//    id 'com.google.devtools.ksp'
}

android {
    compileSdkVersion 30

    def baseVerName = "1.0.0"
    def autoBuildNumber = System.properties['auto_build_num']

    def verName = getVerName(baseVerName, autoBuildNumber)
    def verCode = getVerCode(baseVerName, autoBuildNumber)
    println("VersionName = $verName, VersionCode = $verCode")

    defaultConfig {
        applicationId "com.tustar.demo"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode verCode
        versionName verName
        multiDexEnabled true

        testInstrumentationRunner "androidx.selector_sunset2.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    ndkVersion '21.0.6113669'

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }
    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true

        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }
    kotlinOptions {
        jvmTarget = 1.8
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion Libs.AndroidX.Compose.version
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.aar"])
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Kotlin
    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.Coroutines.core
    implementation Libs.Kotlin.Coroutines.android
    // AndroidX
    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.ConstraintLayout.constraintlayout
    implementation Libs.AndroidX.Activity.ktx
    implementation Libs.AndroidX.Fragment.ktx
    implementation Libs.AndroidX.recyclerview
    implementation Libs.AndroidX.Legacy.supportV4
    implementation Libs.AndroidX.vectordrawable
    // Lifecycle
    implementation Libs.AndroidX.Lifecycle.ViewModel.ktx
    implementation Libs.AndroidX.Lifecycle.LiveData.ktx
    implementation Libs.AndroidX.Lifecycle.Runtime.ktx
    implementation Libs.AndroidX.Lifecycle.extensions
    // Navigation
    implementation Libs.AndroidX.Navigation.fragmentKtx
    implementation Libs.AndroidX.Navigation.uiKtx
    implementation Libs.AndroidX.Navigation.dynamicFeaturesFragment
    androidTestImplementation Libs.AndroidX.Navigation.testing
    // StartUp
    implementation Libs.AndroidX.StartUp.runtime
    // WorkManager
    implementation Libs.AndroidX.Work.runtimeKtx
    implementation Libs.AndroidX.Work.gcm
    implementation Libs.AndroidX.Work.multiprocess
    androidTestImplementation Libs.AndroidX.Work.testing
    // Compose
    implementation Libs.AndroidX.Activity.compose
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.AndroidX.Compose.layout
    implementation Libs.AndroidX.Compose.ui
    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.runtimeLivedata
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.materialIconsExtended
    implementation Libs.AndroidX.Compose.tooling
    implementation Libs.AndroidX.Compose.animation
    implementation Libs.AndroidX.Compose.uiTest
    implementation Libs.AndroidX.Navigation.compose
    implementation Libs.AndroidX.ConstraintLayout.compose
    // Hilt
    implementation Libs.Hilt.android
    implementation Libs.Hilt.work
    implementation Libs.Hilt.navigationCompose
    kapt Libs.Hilt.daggerCompiler
    kapt Libs.Hilt.hiltCompiler
    // Retrofit
    implementation Libs.Squareup.Retrofit2.retrofit
    implementation Libs.Squareup.Retrofit2.converterJson
    implementation Libs.Squareup.OkHttp3.loggingInterceptor
    // Amap
    implementation Libs.Amap.location
    // Google
    implementation Libs.Google.material
    // Accompanist
//    implementation Libs.Accompanist.coil
    implementation Libs.Accompanist.insets
    implementation Libs.Accompanist.permissions
    implementation Libs.Accompanist.systemuicontroller
    // Test
    testImplementation Libs.JUnit.junit
    androidTestImplementation Libs.AndroidX.Test.Ext.junit
    androidTestImplementation Libs.AndroidX.Test.espressoCore

    //
    implementation project(':annotation')
    kapt project(':compiler')
    implementation project(':weather')
    implementation project(':data')
}

static def getVerName(String baseVerName, String autoBuildNumber) {
    return autoBuildNumber ? String.format("%s.%04d", baseVerName, autoBuildNumber.toInteger()) : baseVerName
}

static def getVerCode(String baseVerName, String autoBuildNumber) {
    return getVerName(baseVerName, autoBuildNumber).replace(".", "").toInteger()
}